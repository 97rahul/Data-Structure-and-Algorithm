#include <unordered_map>
#include <queue>
#include <list>


bool isCyclicBFS(int src,unordered_map<int,bool> &visited,unordered_map<int,list<int>> &adjList){
    unordered_map<int,int> parent;
    
    parent[src] = -1;
    visited[src] = 1;
    queue<int> q;
    q.push(src);
    
    while(!q.empty()){
        int front = q.front();
        q.pop();
        
        for(auto j:adjList[front]){
            if(visited[j] && j!=parent[front])
                return true;
            else if(!visited[j]){
                q.push(j);
                visited[j] = true;
                parent[j] = front;
            }
        }
    }
    return false;   
}

bool isCyclicDFS(int src,int parent,unordered_map<int,bool> &visited,unordered_map<int,list<int>> &adjList){
    visited[src] = true;
    for(auto j:adjList[src]){
        if(!visited[j]){
            bool ans = isCyclicDFS(j,src,visited,adjList);
            if(ans)
                return true;
        }
        else if(parent != j){
            return true;
        }
        
    }
    return false;
    
}
   

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,list<int>> adjList;
    for(int i = 0;i<m;i++){
        int u = edges[i][0];
        int v = edges[i][1];
        
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    
    unordered_map<int,bool> visited;
    for(int i = 0;i<n;i++){
        if(!visited[i]){
            bool ans = isCyclicDFS(i,-1,visited,adjList);
            if(ans == 1)
                return "Yes";
        }
    }
    return "No";
    
}
