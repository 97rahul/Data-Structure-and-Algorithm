string longestCommonPrefix(vector<string> &arr, int n)
{
    string ans = "";
    
    for(int i=0;i<arr[0].length();i++){
        char ch = arr[0][i];
        bool match = true;
        
        for(int j =1;j<n;j++){
            if(arr[j].size()<i || ch != arr[j][i]){
                match = false;
                break;
            }
        }
        if(!match)
            break;
        ans.push_back(ch);
    }
    return ans;
}


//Using Trie

class TrieNode{
    public:
    char data;
    TrieNode *children[26];
    int childCount;
    bool isTerminal;
    
    TrieNode(char ch){
        data = ch;
        for(int i =0;i<26;i++){
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie {
    public:
    TrieNode *root;
    /** Initialize your data structure here. */
    Trie(char ch) {
        root = new TrieNode(ch);
    }

    /** Inserts a word into the trie. */
    void insertUtil(TrieNode* root,string word){
        
        //base case
        if(word.length() == 0){
            root->isTerminal = true;
            return;
        }
        int index = word[0] - 'a';
        TrieNode* child;
        
        if(root->children[index] != NULL)
            child = root->children[index];
        else{
            child = new TrieNode(word[0]);
            root->childCount++;
            root->children[index] = child;
        }      
        insertUtil(child,word.substr(1));     
    }
       
    void insert(string word) {
        insertUtil(root,word);
    }
    
    void lcp(string first,string &ans){
        for(int i=0;i<first.length();i++){
            
            char ch = first[i];
            
            if(root->childCount == 1){
                ans.push_back(ch);
                int index = ch - 'a';
                root = root->children[index];
            }
            else
                break;
            
            if(root->isTerminal)
                break;
        }
    }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
    Trie* t = new Trie('\0');
    for(int i =0;i<n;i++)
        t->insert(arr[i]);
    
    string first = arr[0];
    string ans = "";
    t->lcp(first,ans);
    return ans;
}


