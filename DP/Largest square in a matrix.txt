class Solution{
public:

    int solveMem(vector<vector<int>> &mat,int i,int j,int &maxi,vector<vector<int>> &dp){
        
        if(i>=mat.size() || j>=mat[0].size())
            return 0;
            
        if(dp[i][j] != -1)
            return dp[i][j];
            
        int right = solveMem(mat,i,j+1,maxi,dp);
        int diag = solveMem(mat,i+1,j+1,maxi,dp);
        int down = solveMem(mat,i+1,j,maxi,dp);
        
        if(mat[i][j] == 1){
            dp[i][j] = 1 + min(right,min(diag,down));
            maxi = max(maxi,dp[i][j]);
            return dp[i][j];
        }
        else
            return dp[i][j] = 0;
    
    }



    int solveTabSC(vector<vector<int>> &mat,int &maxi){
        
        int row = mat.size();
        int col = mat[0].size();
        
        vector<int> curr(col+1,0);
        vector<int> next(col+1,0);
        
        for(int i = row-1;i>=0;i--){
            for(int j = col-1;j>=0;j--){
                
                int right = curr[j+1];
                int diag = next[j+1];
                int down = next[j];
                
                if(mat[i][j] == 1){
                    curr[j] = 1 + min(right,min(diag,down));
                    maxi = max(maxi,curr[j]);
                }
                else
                    curr[j] = 0;
                
                
            }
            next = curr;
        }
        
        return maxi;
        
        
    }

    int maxSquare(int n, int m, vector<vector<int>> mat){
        int maxi = 0;
        //vector<vector<int>>dp(n,vector<int>(m,-1));
        //solveMem(mat,0,0,maxi,dp);
        solveTabSC(mat,maxi);
        return maxi;
    }
};